#include <iostream>
#include <vector>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <algorithm>

class PSO {
private:
    double c1 = 0.2; // 学习率c1
    double c2 = 0.2; // 学习率c2
    int maxIteration = 100; // 最大迭代次数
    int particleNumber = 3000; // 粒子数
    int dim = 2; // 粒子的特征数，速度和位置
    double maxVelocity = 0.1; // 单个分量速度的最大值
    std::vector<std::vector<double>> velocity; // 粒子的速度
    std::vector<std::vector<double>> location; // 粒子的位置
    std::vector<std::vector<double>> pBest; // 每个粒子在当前所有迭代中的最佳位置
    std::vector<double> gBest; // 群体最优位置
    std::vector<double> pBestGoalFunction; // 每个粒子在最优位置的目标函数值
    double gBestGoalFunction; // 群体最优位置的目标函数值

public:
    // 构造函数
    PSO() {
        // 初始化随机数种子
        std::srand(static_cast<unsigned int>(std::time(nullptr)));

        // 初始化速度
        velocity.resize(particleNumber, std::vector<double>(dim));
        for (int i = 0; i < particleNumber; i++) {
            for (int j = 0; j < dim; j++) {
                velocity[i][j] = (std::rand() % 2001 - 1000) / 10000.0; // 取-0.1~0.1之间的随机数
            }
        }

        // 初始化位置
        location.resize(particleNumber, std::vector<double>(dim));
        for (int i = 0; i < particleNumber; i++) {
            for (int j = 0; j < dim; j++) {
                location[i][j] = (std::rand() % 20001 - 10000) / 1000.0; // 取-10~10之间的随机数
            }
        }

        // 单个最优位置为当前位置
        pBest = location;

        // 每个粒子的目标函数的值
        pBestGoalFunction.resize(particleNumber);
        for (int i = 0; i < particleNumber; i++) {
            pBestGoalFunction[i] = getGoalFunction(location[i][0], location[i][1]);
        }

        // 获取当前群体最优位置
        gBestGoalFunction = pBestGoalFunction[0];
        gBest = getGBest();

        // 计算群体最优目标函数的值
        gBestGoalFunction = getGoalFunction(gBest[0], gBest[1]);
    }

    // 计算当前粒子的目标函数
    double getGoalFunction(double x1, double x2) {
        double goal;
        goal = 1 + 1 / 4000 * (x1 * x1 + x2 * x2) - cos(x1 / sqrt(1)) * cos(x2 / sqrt(2));
        return goal;
    }

    // 计算当前迭代次数最优位置
    void getPBest() {
        for (int i = 0; i < particleNumber; i++) {
            // 如果粒子的目标函数值比当前最优的目标函数值位置还要小
            if (getGoalFunction(location[i][0], location[i][1]) < pBestGoalFunction[i]) {
                pBest[i] = location[i];
                pBestGoalFunction[i] = getGoalFunction(location[i][0], location[i][1]);
            }
        }
    }

    // 计算群体最优位置
    void getGBest() {
        int gBestIndex = 0;
        for (int i = 0; i < particleNumber; i++) {
            if (pBestGoalFunction[i] < gBestGoalFunction) {
                gBestGoalFunction = pBestGoalFunction[i];
                gBestIndex = i;
            }
        }
        gBest = pBest[gBestIndex];
    }

    // 更新速度和位置
    void updateVX() {
        for (int i = 0; i < particleNumber; i++) {
            for (int j = 0; j < dim; j++) {
                velocity[i][j] = velocity[i][j] + c1 * ((std::rand() % 10001) / 10000.0) * (pBest[i][j] - location[i][j])
                        + c2 * ((std::rand() % 10001) / 10000.0) * (gBest[j] - location[i][j]);
                if (std::abs(velocity[i][j]) > maxVelocity) {
                    if (velocity[i][j] < 0)
                        velocity[i][j] = -maxVelocity;
                    if (velocity[i][j] > 0)
                        velocity[i][j] = maxVelocity;
                }
                location[i][j] += velocity[i][j];
            }
        }
    }

    // 迭代:更新速度和位置，选取最优位置
    void iteration() {
        updateVX();
        getPBest();
        getGBest();
    }
};

int main() {
    PSO test;
    for (int i = 1; i <= test.maxIteration; i++) {
        test.iteration();
        std::cout << "第" << i << "次迭代：" << std::endl;
        std::cout << "群体最优位置：( " << test.gBest[0] << "," << test.gBest[1] << ")" << std::endl;
        std::cout << "目标函数值：" << test.gBestGoalFunction << std::endl;
    }
    return 0;
}
